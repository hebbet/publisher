import{_ as e,z as t,A as l,Y as n,C as s,U as i,a6 as o,Q as c}from"./framework.7a428f9b.js";const p={},d=n("h1",{id:"aliases",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aliases","aria-hidden":"true"},"#"),s(" Aliases")],-1),r=n("code",null,"de-DE",-1),u=n("code",null,"de",-1),v=n("code",null,"de-CH",-1),g=n("code",null,"de_CH",-1),h={href:"https://github.com/Laravel-Lang/publisher/blob/main/config/public.php",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"configuration file",-1),m=o(`<p>After that, all adding, updating, and deleting actions will automatically use the specified aliases.</p><p>For example, <code>config/lang-publisher.php</code> config file:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">LaravelLang<span class="token punctuation">\\</span>Publisher<span class="token punctuation">\\</span>Constants<span class="token punctuation">\\</span>Locales</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;aliases&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token class-name static-context">Locales</span><span class="token operator">::</span><span class="token constant">GERMAN</span><span class="token operator">-&gt;</span><span class="token property">value</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;de-DE&#39;</span><span class="token punctuation">,</span>

        <span class="token class-name static-context">Locales</span><span class="token operator">::</span><span class="token constant">GERMAN_SWITZERLAND</span><span class="token operator">-&gt;</span><span class="token property">value</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;de-CH&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan lang:add de de_CH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lang
    de-CH
    de-DE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function _(b,f){const a=c("ExternalLinkIcon");return t(),l("div",null,[d,n("p",null,[s("If you want to name codes differently, such as "),r,s(" instead of "),u,s(" or "),v,s(" instead of "),g,s(", you can define aliases in the "),n("a",h,[k,i(a)]),s(".")]),m])}const L=e(p,[["render",_],["__file","aliases.html.vue"]]);export{L as default};
